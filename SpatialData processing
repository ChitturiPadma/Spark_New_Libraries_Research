In today's world there has been vast amount of data being generated from mobiles/electronic devices. This data constitues
spatio-temporal aspect. Spatiotemporal data is one of the complex data types. Examples of such data would be - data created by sensors that record
the location or movement of users/objects that indicate their position. Some of the usecases analyzing spatio-temporal 
data is - finding correlated events in the respective spatial/temporal components. 


The two known frameworks for large scale data processing are Hadoop and Spark. Hadoop has its 
extenstions Spatial Hadoop and Hadoop-GIS. Since the processing of Hadoop is mostly disk based, in-memory processing 
frameworks such as Spark can be leveraged for processing spatial data. There are 3 systems that implement Spatial operators 
with Spark - GeoSpark, SpatialSpark and STARK

GeoSpark - Provides PointRDD, RectangleRDD (RDD of rectangle objects defined by Points and the rectangles are distributed
across machines), PolygonRDD, and CircleRDD. These RDDs are created over plain RDDs and available 
as API to express the computation in terms of spatial operators/filters. Supports the following queries:
  1. K-nearest neighbor queries
  2. Range queries
  3. Join queries (with contains or intersects predicates)
 The above queries can be execute with or without having an index. The predicate withinDistance is only supported for joins.
 
 GeoSpark uses R-trees and quad trees to create indexes over RDDs. Spatial indexing strategies define how the Spatial RDD
 could be partitioned using a grid structure and assign the grids to machines for parallel execution. Internall GeoSpark
 adapts a strategy to decide whether a local index needs to be created on Spatial RDD partition inorder to balance between 
 execution time and memory/cpu utilization.
 
 


